package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.conditions.*;
import zoot.arbre.expressions.* ;
import zoot.arbre.instructions.* ;
import zoot.arbre.declarations.* ;
import zoot.arbre.fonctions.* ;
import zoot.* ;
import zoot.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    DEBUT, FIN, POINTVIRGULE, ECRIRE, VARIABLES , FONCTIONS, PARENTHESE_OUVRANTE, PARENTHESE_FERMANTE, VIRGULE, RETURN, SI, ALORS, SINON, FINSI,
                   REPETER, JUSQUA, FINREPETER, PLUS, FOIS, EGAL, DIFFERENT, INFERIEUR, ET, OU, NON, MOINS ;
terminal String    CSTENTIERE, CSTBOOLEENNE, IDF, ENTIER, BOOLEEN, AFC ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG ;
non terminal BlocDeDeclaration LDECL, LDECL_OPTIONNELLE, PARAMETRES ;
non terminal BlocDInstructions LINST ;
non terminal BlocDeFonctions LFONCTION ;
non terminal ListeExpressions LEXP, LEXP_OPTIONNELLE ;
non terminal Instruction INST ;
non terminal Condition COND ;
non terminal Boucle LOOP ;
non terminal Operateur OPER ;
non terminal Expression EXP ;
non terminal Declaration DECL ;
non terminal Fonction FONCTION ;
non terminal Type TYPE ;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     VARIABLES  LDECL:ld  FONCTIONS  LFONCTION:lf  DEBUT  LINST:li  FIN
                {: RESULT = new Prog(0, ld, lf, li) ; :}
                ;

TYPE    ::=     ENTIER
                {: RESULT = Type.ENTIER; :}
        |
                BOOLEEN
                {: RESULT = Type.BOOLEEN; :}
                ;

DECL   ::=      TYPE:t IDF:v POINTVIRGULE
                {: RESULT = new Declaration(t, v, tleft + 1) ; :}
                ;

LDECL   ::=     LDECL:ld DECL:d
                {: ((BlocDeDeclaration)ld).ajouter(d) ;
                   RESULT = ld ; :}
        |
                DECL:d
                {: BlocDeDeclaration b = new BlocDeDeclaration(dleft + 1) ;
                   b.ajouter(d) ;
                   RESULT = b ; :}
                ;

LDECL_OPTIONNELLE ::= LDECL:ld
                {: RESULT = ld ; :}
        |
                {: RESULT = new BlocDeDeclaration() ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                IDF:i AFC EXP:e POINTVIRGULE
                {: RESULT = new Affectation(i, e, eleft + 1) ; :}
        |
                RETURN EXP:e POINTVIRGULE
                {: RESULT = new ReturnStatement(e, eleft + 1) ; :}
        |
                COND:c
                {: RESULT = c ; :}
        |
                LOOP:l
                {: RESULT = l ; :}
                ;

COND   ::=      SI EXP:e ALORS  LINST:li  FINSI
                {: RESULT = new Si(e, li, eleft + 1) ; :}
        |
                SI EXP:e ALORS  LINST:li  SINON  LINST:li2  FINSI
                {: RESULT = new SiSinon(e, li, li2, eleft + 1) ; :}
                ;

LOOP   ::=      REPETER  LINST:li  JUSQUA EXP:e  FINREPETER
                {: RESULT = new Boucle(li, e, eleft + 1) ; :}
                ;

OPER   ::=     PLUS
                {: RESULT = Operateur.PLUS ; :}
        |
               FOIS
                {: RESULT = Operateur.FOIS ; :}
        |
               EGAL
                {: RESULT = Operateur.EGAL ; :}
        |
               DIFFERENT
                {: RESULT = Operateur.DIFFERENT ; :}
        |
               INFERIEUR
                {: RESULT = Operateur.INFERIEUR ; :}
        |
               ET
                {: RESULT = Operateur.ET ; :}
        |
               OU
                {: RESULT = Operateur.OU ; :}
                ;
    
EXP    ::=      CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
                CSTBOOLEENNE:c
                {: RESULT = new ConstanteBooleenne(c, cleft + 1) ; :}
        |
                IDF:i
                {: RESULT = new Variable(i, ileft + 1) ; :}
        |
                PARENTHESE_OUVRANTE EXP:e PARENTHESE_FERMANTE
                {: RESULT = e ; :}
        |
                IDF:i PARENTHESE_OUVRANTE  LEXP_OPTIONNELLE:le  PARENTHESE_FERMANTE
                {: RESULT = new AppelFonction(i, le, ileft + 1) ; :}
        |
                MOINS EXP:e
                {: RESULT = new Negatif(e, eleft + 1) ; :}
        |
                NON EXP:e
                {: RESULT = new Inversion(e, eleft + 1) ; :}
        |
                PARENTHESE_OUVRANTE EXP:e1 OPER:o EXP:e2 PARENTHESE_FERMANTE
                {: RESULT = new Operation(e1, o, e2, e1left + 1) ; :}
                ;

PARAMETRES ::=  PARENTHESE_OUVRANTE  LDECL_OPTIONNELLE:ld  PARENTHESE_FERMANTE
                {: RESULT = ld ; :}
                ;

FONCTION ::=    TYPE:t IDF:v PARAMETRES:p  VARIABLES LDECL_OPTIONNELLE:ld DEBUT  LINST:li  FIN
                {: RESULT = new Fonction(t, v, p, ld, li, tleft + 1) ; :};

LFONCTION ::=   LFONCTION:lf FONCTION:f
                {: ((BlocDeFonctions)lf).ajouter(f) ;
                   RESULT = lf ; :}
        |
                FONCTION:f
                {: BlocDeFonctions b = new BlocDeFonctions(fleft + 1) ;
                   b.ajouter(f) ;
                   RESULT = b ; :}
                ;

LEXP    ::=     LEXP:le VIRGULE  EXP:e
                {: ((ListeExpressions)le).ajouter(e) ;
                   RESULT = le ; :}
        |
                EXP:e
                {: ListeExpressions l = new ListeExpressions(eleft + 1) ;
                   l.ajouter(e) ;
                   RESULT = l ; :}
                ;

LEXP_OPTIONNELLE ::= LEXP:le
                {: RESULT = le ; :}
        |
                {: RESULT = new ListeExpressions() ; :}
                ;